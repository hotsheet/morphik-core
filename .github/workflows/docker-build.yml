name: Build Docker Image

on:
  pull_request
  
permissions:
  contents: read

jobs:
  docker-build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
          
      - name: Copy Docker config
        run: |
          echo "Using centralized Docker config from .github/config/morphik.toml"
          cp .github/config/morphik.toml morphik.toml
          echo "Config file updated:"
          head -10 morphik.toml

      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo docker builder prune -a --force
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/morphik-core
          tags: |
            type=ref,event=pr
            type=sha,prefix=pr-{{branch}}-
            
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dockerfile
          push: false
          load: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            morphik-core:test
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          # Remove cache-to for PR builds to save disk space 
          
      - name: Test Docker container
        run: |
          # Use the local test tag instead of the registry tag
          IMAGE_TAG="morphik-core:test"
          echo "Testing image: $IMAGE_TAG"
          
          # Start container in detached mode with config mounted
          CONTAINER_ID=$(docker run -d -p 8000:8000 \
            -e POSTGRES_URI="postgresql://morphik:morphik@localhost:5432/morphik" \
            -v "$(pwd)/morphik.toml:/app/morphik.toml" \
            
            "$IMAGE_TAG")
          
          echo "Started container: $CONTAINER_ID"
          
          # Wait for server to be ready with 60 second timeout
          timeout=60
          interval=2
          elapsed=0
          
          echo "Waiting for server to be ready..."
          while [ $elapsed -lt $timeout ]; do
            if curl -f -s http://localhost:8000/ping > /dev/null 2>&1; then
              echo "‚úÖ Server is responding to /ping endpoint"
              break
            fi
            
            echo "‚è≥ Waiting for server... (${elapsed}s/${timeout}s)"
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          
          # Check if we timed out
          if [ $elapsed -ge $timeout ]; then
            echo "‚ùå Server failed to respond within ${timeout} seconds"
            echo "Container logs:"
            docker logs "$CONTAINER_ID"
            docker stop "$CONTAINER_ID"
            docker rm "$CONTAINER_ID"
            exit 1
          fi
          
          # Verify the response is actually 200
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/ping)
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Health check passed - /ping returned HTTP $HTTP_CODE"
          else
            echo "‚ùå Health check failed - /ping returned HTTP $HTTP_CODE"
            docker logs "$CONTAINER_ID"
            docker stop "$CONTAINER_ID"
            docker rm "$CONTAINER_ID"
            exit 1
          fi
          
          # Clean up
          echo "üßπ Cleaning up container"
          docker stop "$CONTAINER_ID"
          docker rm "$CONTAINER_ID"
          echo "‚úÖ Test completed successfully" 